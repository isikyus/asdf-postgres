#!/usr/bin/env bash

install_postgres() {
  local install_type=$1
  local version=$2
  local install_path=$3

  if [ "$TMPDIR" = "" ]; then
    local tmp_download_dir=$(mktemp -d)
  else
    local tmp_download_dir=$TMPDIR
  fi

  local source_path=$(get_download_file_path $install_type $version $tmp_download_dir)
  download_source $install_type $version $source_path

  # running this in a subshell
  # because we don't want to disturb current working dir
  (
    cd $(dirname $source_path)
    tar zxf $source_path || exit 1
    cd $(untar_path $install_type $version $tmp_download_dir)

    prepare $version

    local configure_options="$(construct_configure_options)"

    echo "Building with options: $configure_options"
    echo "Build directory: $source_path"
    ./configure $configure_options || exit 1
    make || exit 1
    make install || exit 1
    cd contrib || exit 1
    make || exit 1
    make install || exit 1
    mkdir $install_path/data || exit 1
    if [ "$POSTGRES_SKIP_INITDB" = "" ]; then
      $install_path/bin/initdb -D $install_path/data -U postgres || exit 1
    fi
  )
}

prepare() {
  local version=$1
  local minor=${version%.*}
  local major=${minor%.*}
  local minor_integer=$(awk -v x=$minor 'BEGIN{print x*100}')
  local icu_uconv=$(uconv -V)
  local icu_version=${icu_uconv##*ICU }
  local icu_version_major=${icu_version%.*}

  if [ "$(uname)" == "Linux" ] && [ "$icu_version_major" -eq 68 ] && [ "$major" -ge 11 ]; then
    cd src || exit
    git apply $HOME/.asdf/plugins/postgres/lib/icu68.patch
    cd ..
  fi

  if [ "$(uname)" == "Darwin" ] && [ "$minor_integer" -ge '840' ] && [ "$minor_integer" -le "930" ]; then
    cd contrib || exit
    git apply $HOME/.asdf/plugins/postgres/lib/uuid-ossp.patch
    cd ..
  fi
}

construct_configure_options() {
  load_configure_options

  if [ "$POSTGRES_CONFIGURE_OPTIONS" = "" ]; then
    local configure_options="--prefix=$install_path \
    --with-uuid=e2fs \
    --with-openssl \
    --with-zlib \
    $(lib_include_paths)"

    if [ "$POSTGRES_EXTRA_CONFIGURE_OPTIONS" != "" ]; then
      configure_options="$configure_options $POSTGRES_EXTRA_CONFIGURE_OPTIONS"
    fi
  else
    local configure_options="$POSTGRES_CONFIGURE_OPTIONS --prefix=$install_path"
  fi

  echo "$configure_options"
}

load_configure_options() {
  local asdf_postgres_configure_options="${HOME}/.asdf-postgres-configure-options"

  if [[ ! -r "$asdf_postgres_configure_options" ]]; then
    return
  fi

  set -a
  source "$asdf_postgres_configure_options"
  set +a
}

lib_include_paths() {
  if [ -d "$HOMEBREW_PREFIX/opt" ]; then
    local homebrew_lib_path
    local homebrew_include_path
    homebrew_lib_path="$HOMEBREW_PREFIX/opt/openssl/lib"
    homebrew_include_path="$HOMEBREW_PREFIX/opt/openssl/include:/opt/homebrew/include"

    while read -r dir ; do
      homebrew_lib_path="$homebrew_lib_path:$dir/lib"
      homebrew_include_path="$homebrew_include_path:$dir/include"
    done <<<"$(ls -d $HOMEBREW_PREFIX/opt/openssl@* | sort -rV)"

    homebrew_lib_path="$homebrew_lib_path:$HOMEBREW_PREFIX/openssl/lib:$HOMEBREW_PREFIX/libressl/lib:$HOMEBREW_PREFIX/lib:"
    homebrew_include_path="$homebrew_include_path:$HOMEBREW_PREFIX/openssl/include:$HOMEBREW_PREFIX/libressl/include:$HOMEBREW_PREFIX/include:"
  fi
  echo "--with-libraries='/opt/local/lib:/sw/lib:/usr/local/opt/openssl/lib:$homebrew_lib_path/usr/local/lib:/usr/lib' \
    --with-includes='/opt/local/lib:/sw/lib:/usr/local/opt/openssl/include:$homebrew_include_path/usr/local/include:/usr/local/lib:/usr/lib'"
}

untar_path() {
  local install_type=$1
  local version=$2
  local tmp_download_dir=$3

  if [ "$install_type" = "version" ]; then
    echo "$tmp_download_dir/postgresql-${version}"
  else
    echo "$tmp_download_dir/postgresql-${version}"
  fi
}

download_source() {
  local install_type=$1
  local version=$2
  local download_path=$3
  local download_url=$(get_download_url $install_type $version)

  curl -Lo $download_path -C - $download_url
}

get_download_file_path() {
  local install_type=$1
  local version=$2
  local tmp_download_dir=$3
  local pkg_name="postgresql-${version}.tar.gz"

  echo "$tmp_download_dir/$pkg_name"
}

get_download_url() {
  local install_type=$1
  local version=$2
  echo "https://ftp.postgresql.org/pub/source/v${version}/postgresql-${version}.tar.gz"
}

install_postgres $ASDF_INSTALL_TYPE $ASDF_INSTALL_VERSION $ASDF_INSTALL_PATH
